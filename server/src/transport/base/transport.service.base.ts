/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Transport, Car } from "@prisma/client";

export class TransportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TransportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportFindManyArgs>
  ): Promise<number> {
    return this.prisma.transport.count(args);
  }

  async findMany<T extends Prisma.TransportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportFindManyArgs>
  ): Promise<Transport[]> {
    return this.prisma.transport.findMany(args);
  }
  async findOne<T extends Prisma.TransportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportFindUniqueArgs>
  ): Promise<Transport | null> {
    return this.prisma.transport.findUnique(args);
  }
  async create<T extends Prisma.TransportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportCreateArgs>
  ): Promise<Transport> {
    return this.prisma.transport.create<T>(args);
  }
  async update<T extends Prisma.TransportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportUpdateArgs>
  ): Promise<Transport> {
    return this.prisma.transport.update<T>(args);
  }
  async delete<T extends Prisma.TransportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportDeleteArgs>
  ): Promise<Transport> {
    return this.prisma.transport.delete(args);
  }

  async findCarId(
    parentId: string,
    args: Prisma.CarFindManyArgs
  ): Promise<Car[]> {
    return this.prisma.transport
      .findUnique({
        where: { id: parentId },
      })
      .carId(args);
  }
}
